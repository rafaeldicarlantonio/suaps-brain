openapi: 3.1.0
info:
  title: SUAPS Agent API (No-Auth Dev Mode)
  version: "1.0.0"
servers:
  - url: https://suaps-brain.onrender.com

paths:
  /healthz:
    get:
      operationId: healthz
      x-openai-isConsequential: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  auth_disabled: { type: boolean }

  /whoami:
    get:
      operationId: whoami
      x-openai-isConsequential: false
      parameters:
        - in: query
          name: user_id
          schema: { type: string, nullable: true, description: "UUID or alias; non-UUID treated as email." }
        - in: query
          name: user_email
          schema: { type: string, nullable: true }
      responses:
        "200":
          description: Current resolved user (dev helper)
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorized: { type: boolean }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string, nullable: true }

  /chat:
    post:
      operationId: chat
      x-openai-isConsequential: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                user_id:     { type: string, nullable: true, description: "UUID or alias; non-UUID treated as email." }
                user_email:  { type: string, nullable: true }
                session_id:  { type: string, nullable: true }
                message:     { type: string }
                temperature: { type: number, nullable: true, description: "0.0â€“1.2; optional" }
                history:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role:
                        type: string
                        enum: [user, assistant, system]
                      content:
                        type: string
      responses:
        "200":
          description: Chat response
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string }
                  answer: { type: string }

  /memories/upsert:
    post:
      operationId: upsertMemory
      x-openai-isConsequential: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, content]
              properties:
                user_id:    { type: string, nullable: true, description: "UUID or alias; non-UUID treated as email." }
                user_email: { type: string, nullable: true }
                type:
                  type: string
                  enum: [episodic, semantic, procedural]
                title:      { type: string, nullable: true }
                content:    { type: string }
                importance: { type: integer, default: 3 }
                tags:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: Upserted memory id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }

  /ingest/batch:
    post:
      operationId: ingestBatch
      x-openai-isConsequential: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items]
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required: [text, type]
                    properties:
                      user_id:    { type: string, nullable: true, description: "UUID or alias; non-UUID treated as email." }
                      user_email: { type: string, nullable: true }
                      text:       { type: string }
                      type:
                        type: string
                        enum: [semantic, episodic]
                      tags:
                        type: array
                        items: { type: string }

components:
  schemas: {}
