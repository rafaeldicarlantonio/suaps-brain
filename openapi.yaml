openapi: 3.1.0
info:
  title: SUAPS Brain API
  version: '1.0.0'
servers:
  - url: https://suaps-brain.onrender.com

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

# Apply API key to everything by defaultâ€¦
security:
  - ApiKeyAuth: []

paths:
  /healthz:
    get:
      operationId: healthz
      security: []    # no auth
      responses: { '200': { description: ok } }

  /debug/memories:
    get:
      operationId: debugMemories
      security: []    # no auth
      responses: { '200': { description: ok } }

  /debug/ping:
    get:
      operationId: ping
      security: []    # no auth
      responses: { '200': { description: ok } }

  /debug/echo:
    post:
      operationId: echo
      security: []    # no auth to remove all auth variables
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: ok

  /ingest/batch:
    post:
      operationId: ingestBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                items:
                  type: array
                  minItems: 1
                  items: { $ref: '#/components/schemas/IngestItem' }
                dedupe: { type: boolean }
              required: [items]
      responses:
        '200': { description: ok }

    /memories/upsert:
    post:
      operationId: memoriesUpsert
      x-openai-isConsequential: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                type: { type: string, enum: [semantic, episodic, procedural] }
                title: { type: string }
                content: { type: string }
                importance: { type: integer }
                tags: { type: array, items: { type: string } }
                user_email: { type: string }
                user_id: { type: string }
              required: [type, content]
      responses: { '200': { description: ok } }


    /chat:
    post:
      operationId: chat
      x-openai-isConsequential: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                prompt: { type: string }
                session_id: { type: string }
                role: { type: string, enum: [researcher, staff, director, admin] }
                preferences: { type: object, additionalProperties: true }
                debug: { type: boolean }
              required: [prompt]
      responses: { '200': { description: ok } }
  /upload:
    post:
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                tags: { type: string }
      responses:
        '200': { description: ok }

components:
  schemas:
    IngestItem:
      type: object
      additionalProperties: false
      properties:
        user_email: { type: string }
        title: { type: string }
        text: { type: string }
        type: { type: string, enum: [semantic, episodic, procedural] }
        tags: { type: array, items: { type: string } }
        source: { type: string }
        role_view: { type: array, items: { type: string } }
        file_id: { type: string }
        session_id: { type: string }
        dedupe: { type: boolean }
      required: [text, type]
